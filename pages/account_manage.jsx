import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router'
import Link from 'next/link'
import Script from 'next/script'
import Axios from 'axios';
import Popup from 'reactjs-popup';
//import 'reactjs-popup/dist/index.css';
import makeBlockie from 'ethereum-blockies-base64';


export default function Account_management() {
  
  const [address, setAdress] = useState([]);
  const [networkLists, setnetworkLists] = useState([]);
  const [network_all_json_data, setNetwork_all_json_data] = useState([]);
  const [network, setNetwork] = useState([]);
  const [network_rpc, setNetwork_rpc] = useState([]);
  const [network_rpc_link, setNetwork_rpc_link] = useState([]);

  useEffect(() => {
    Axios.get('https://korntimaroon.github.io/hexa_code_api.github.io/api_3.json').then((response) => {
      setnetworkLists(response.data);
    });
    const add_list = JSON.parse(localStorage.getItem('client_wallet'));
    if (add_list) {
      setAdress(add_list);
    }
    if (document) {
      document.getElementById("blockieImg1").src = makeBlockie(localStorage.getItem("current_wallet"));
    }
  }, []);
  useEffect (() => {
    const Web3 = require("web3")          
    //const walletAddress = '0x8690F1feff62008A396B31c2C3f380bD0Ca6d8b8'
    let network = localStorage.getItem("network_res_rpc");

    const web3 = new Web3(new Web3.providers.HttpProvider(network));
    const myObject = JSON.parse(localStorage.getItem('client_wallet'));
    var count = Object.keys(myObject).length;
    let plus = 0;
    async function getBalance(plus) {
      for (let i = 0; i < count; i++) {
        const network_info = JSON.parse(localStorage.getItem('network_rpc_current'))
        plus = plus + parseInt(await web3.eth.getBalance(myObject[i].public_key));
        let res = plus / 1000000000000000000;
        document.getElementById("balance").innerHTML = "Total Balance for " + count + " accounts " + res.toFixed(4) + " " + network_info[0].currency_symbol + " / " + res.toFixed(4) + " USD";
      }
    }
    getBalance(plus);
    function add_network_info() {
      const network_info = JSON.parse(localStorage.getItem('network_rpc_current'))
      document.getElementById("network_info_network").innerHTML = "Network: " + network_info[0].network;
      document.getElementById("network_info_symbol").innerHTML = "Network Main Currency: " + network_info[0].currency_symbol;
      document.getElementById("network_info_chain").innerHTML = "Chain: " + network_info[0].network_id;
    }
    add_network_info();
    
  }, []);
  function reloads() {
    window.location.reload();
  }
  const network_onchange = () => {
    var selection_index_network = document.getElementById("network_current_a").selectedIndex;
    var selection_option_network = document.getElementById("network_current_a").options;
    localStorage.setItem("selection_network", selection_option_network[selection_index_network].index);
    localStorage.setItem('network_current', document.getElementById("network_current_a").value);
    console.log(localStorage.getItem('network_current'));
    localStorage.setItem('network_rpc_current', JSON.stringify(networkLists.filter(network_rpc_current => network_rpc_current.network_id === localStorage.getItem("network_current"))));
    const res_a = JSON.parse(localStorage.getItem('network_rpc_current'));
    localStorage.setItem("network_res_rpc", res_a[0].rpc_url)
    reloads()
  }
  
  async function sleep() {
    await new Promise(resolve => setTimeout(resolve, 10));
    document.getElementById("network_current_a").selectedIndex = localStorage.getItem("selection_network")
  }
  sleep();
  // API for vBeta 2.0.0

  return (
    <div id="body" className={styles.body}>
        <link rel="icon" href="https://s3-alpha-sig.figma.com/img/09cd/fc9e/80f5c54398af1ff7e1ce7483a6d7229f?Expires=1649030400&Signature=FT2~y23aNiEETzb4Rn03YAMIRUS1fNNi18s~98yUH6qgAu1H3vnF73mIkrcVR3F0UUWf-CWP7-dqeGuIZPE0URf35ZFzbLbpYgEuJ-hDIA1i47CeKk07mZUXmm-KEXdEJi24JYIiIYWjayQgyhZH-0PCpudpaeRm0T4qnToalgcVpSXBO7HLXEm7Om6eaLcGki6o6usDwW0XXIDVAkHw6BZQvzhb6hsXxCt3yLHL5ZZDTv~y7YUecg1sjnZ9wzyur73z3C5Qy7ojvnwOJ6kGcUSt1o9shHeT8Be~Afn~MmsNeGchJFqfHh8LkbG3ym0Ay1vf5n0kS61VLli4iQMQGg__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" sizes="32x32 64x64" type="image/png" />
        <title >My Account Management</title>
        <meta name="description" content="Generated by create next app" />
        <div className={styles.menubar}>
          <p><img src="/logo.png" width="90" height="90"></img></p>
          <a className={styles.menu_button_p_all_mode_p}>
            <Popup trigger={<button className={styles.auto}><img className={styles.menu_button_p_all_mode} id="blockieImg1" /></button>} position="bottom">
              <div className={styles.popup_background}>
                <p>My Account</p>
                <button>Lock</button>
                <hr></hr>
                {address.map((item) =>  {
                                        async function getBalance() {
                                          const Web3 = require("web3")
                                          const testnet = localStorage.getItem("network_res_rpc");
                                          const web3 = new Web3(new Web3.providers.HttpProvider(testnet));
                                          //console.log((item.public_key + " " + parseInt(await web3.eth.getBalance(item.public_key)) / 1000000000000000000) + " " + JSON.parse(localStorage.getItem("network_rpc_current"))[0].currency_symbol);
                                        }
                                        getBalance()
                  return (
                    <div key={item.id}>
                      <p>
                        <Link href="/account/[wallet]" as={`/account/${encodeURIComponent(item.public_key)}`}>{item.account_name}</Link>
                      </p>
                      <p id={item.public_key}></p>
                      <hr></hr>
                    </div>
                  )
                })}
                <p><Link href="/add_account">Add Account</Link></p>
                <p><Link href="/setting">Setting</Link></p>
                <p><Link href="/account_manage">Account Management</Link></p>
              </div>
            </Popup>
          </a>
          <a className={styles.menu_button_p_all_mode_network}>
            <select onChange={network_onchange} name="network_current_a" id="network_current_a">
              <optgroup label="Plugin Network">
               {networkLists.map((item) =>  {
                  return (
                      <option key={item.id} value={item.network_id}>{item.network}</option>
                  )
               })}
              </optgroup>
              <optgroup label="Added Network">
              </optgroup>
            </select>
          </a>
        </div>
        <div className={styles.dashboard_title_main}>
          <div className={styles.graph_account_mana}>
            <p>Balance</p>
            <p id="balance" name="balance"></p>
            <p>Chart:</p>
          </div>
          <div className={styles.network_account_mana}>
            <p className={styles.dashboard_title}><Link href="/setting">Network Information</Link></p>
            <p id="network_info_network"></p>
            <p id="network_info_symbol"></p>
            <p id="network_info_chain"></p>
          </div>
        </div>


        <div className={styles.main_manage_account}>
            <div className={styles.account_container}>
              {address.map((item) =>  {

                      const Web3 = require("web3")             
                      const testnet = localStorage.getItem("network_res_rpc");
                      const walletAddress = item.public_key;
                      const web3 = new Web3(new Web3.providers.HttpProvider(testnet));
                      //document.getElementById("q").innerHTML = web3.eth.getBalance(walletAddress);

                      async function getBalance() {
                        document.getElementById(item.account_name).innerHTML = (parseInt(await web3.eth.getBalance(walletAddress)) / 1000000000000000000).toFixed(4) + " " + JSON.parse(localStorage.getItem("network_rpc_current"))[0].currency_symbol + " / " + (parseInt(await web3.eth.getBalance(walletAddress)) / 1000000000000000000).toFixed(4) + " USD";
                      }
                      const wallet_length = item.public_key.length;
                      getBalance();
                      

              return ( 
                <div key={item.id} id="acount_list" className={styles.account_list}>
                  <div key={item.id} id="acount_list" className={styles.account_list_div}>
                      <p>{item.public_key.substring(5,0) + "...." + item.public_key.substring(wallet_length,wallet_length-5)}</p>
                      <p>
                        <Link href="/account/[wallet]" as={`/account/${encodeURIComponent(item.public_key)}`}>{item.account_name}</Link>
                      </p>
                      <p id={item.account_name}></p>
                      <p  className={styles.account_list_in}><Link href="/account/[wallet]" as={`/account/${encodeURIComponent(item.public_key)}`}>{ '>' }</Link></p>

                  </div>
                </div>
                )})}
            </div>
        </div>
    </div>
  )
}


//client_wallet = [{"public_key":"0xC2411Ee1d51ad9FB2B5427596fA2EEc3E67A3E92","private_key":"haeslo","account_name":"Ryu Wallet 1"},{"public_key":"0xC2411Ee1d51ad9FB2B5427596fA2EEc3E67A3E92","private_key":"haelo","account_name":"Ryu Wallet 2"},{"public_key":"0xC2411Ee1d51ad9FB2B5427596fA2EssEc3E67A3E92","private_key":"haseslo","account_name":"Ryu Wallet 3"}]


//localStorage.setItem('client_wallet', '[{"public_key":"0xaFfDA395A56644662f1D5c7C71732e3d847baD14","private_key":"haeslo","account_name":"Ryu Wallet 1"},{"public_key":"0xC2411Ee1d51ad9FB2B5427596fA2EEc3E67A3E92","private_key":"haelo","account_name":"Ryu Wallet 2"},{"public_key":"0x27e996880D706B384a83B7686E2D35Cc900289d0","private_key":"haseslo","account_name":"Ryu Wallet 3"}]');
//make a local storage 
/*
{useEffect(() => {
  myObject = localStorage.getItem('client_wallet');
  var count = Object.keys(myObject).length;
  for (let i = 0; i < count; i++) {
    if (item.account_name == myObject[i].account_name) {
      document.getElementById("balance").innerHTML = myObject[i].balance;
    }
  }
}, [])}
*/


//[{"public_key":"0xaFfDA395A56644662f1D5c7C71732e3d847baD14","private_key":"haeslo","account_name":"Ryu Wallet 1"},{"public_key":"0xC2411Ee1d51ad9FB2B5427596fA2EEc3E67A3E92","private_key":"haelo","account_name":"Ryu Wallet 2"},{"public_key":"0x27e996880D706B384a83B7686E2D35Cc900289d0","private_key":"haseslo","account_name":"Ryu Wallet 3"}]